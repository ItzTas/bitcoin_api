// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cryptocurrencies.sql

package database

import (
	"context"
	"time"
)

const createCrypto = `-- name: CreateCrypto :one
INSERT INTO cryptocurrencies (id, symbol, name, current_price_usd, current_price_eur, description_en, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, symbol, name, current_price_usd, current_price_eur, description_en, updated_at
`

type CreateCryptoParams struct {
	ID              string
	Symbol          string
	Name            string
	CurrentPriceUsd string
	CurrentPriceEur string
	DescriptionEn   string
	UpdatedAt       time.Time
}

func (q *Queries) CreateCrypto(ctx context.Context, arg CreateCryptoParams) (Cryptocurrency, error) {
	row := q.db.QueryRowContext(ctx, createCrypto,
		arg.ID,
		arg.Symbol,
		arg.Name,
		arg.CurrentPriceUsd,
		arg.CurrentPriceEur,
		arg.DescriptionEn,
		arg.UpdatedAt,
	)
	var i Cryptocurrency
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.CurrentPriceUsd,
		&i.CurrentPriceEur,
		&i.DescriptionEn,
		&i.UpdatedAt,
	)
	return i, err
}

const getCryptoByID = `-- name: GetCryptoByID :one
SELECT id, symbol, name, current_price_usd, current_price_eur, description_en, updated_at FROM cryptocurrencies
WHERE id = $1
`

func (q *Queries) GetCryptoByID(ctx context.Context, id string) (Cryptocurrency, error) {
	row := q.db.QueryRowContext(ctx, getCryptoByID, id)
	var i Cryptocurrency
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.CurrentPriceUsd,
		&i.CurrentPriceEur,
		&i.DescriptionEn,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCrypto = `-- name: UpdateCrypto :one
UPDATE cryptocurrencies
SET current_price_usd = $1, current_price_eur = $2, description_en = $3, updated_at = $4
WHERE id = $5
RETURNING id, symbol, name, current_price_usd, current_price_eur, description_en, updated_at
`

type UpdateCryptoParams struct {
	CurrentPriceUsd string
	CurrentPriceEur string
	DescriptionEn   string
	UpdatedAt       time.Time
	ID              string
}

func (q *Queries) UpdateCrypto(ctx context.Context, arg UpdateCryptoParams) (Cryptocurrency, error) {
	row := q.db.QueryRowContext(ctx, updateCrypto,
		arg.CurrentPriceUsd,
		arg.CurrentPriceEur,
		arg.DescriptionEn,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Cryptocurrency
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Name,
		&i.CurrentPriceUsd,
		&i.CurrentPriceEur,
		&i.DescriptionEn,
		&i.UpdatedAt,
	)
	return i, err
}
