// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: deposits.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits (id, wallet_id, amount, executed_at)
VALUES ($1, $2, $3, $4)
RETURNING id, wallet_id, amount, executed_at
`

type CreateDepositParams struct {
	ID         uuid.UUID
	WalletID   uuid.UUID
	Amount     string
	ExecutedAt time.Time
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (Deposit, error) {
	row := q.db.QueryRowContext(ctx, createDeposit,
		arg.ID,
		arg.WalletID,
		arg.Amount,
		arg.ExecutedAt,
	)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.ExecutedAt,
	)
	return i, err
}

const getDepositsByUserID = `-- name: GetDepositsByUserID :many
SELECT id, wallet_id, amount, executed_at FROM deposits
WHERE wallet_id IN (
    SELECT id
    FROM wallets
    WHERE owner_id = $1
)
`

func (q *Queries) GetDepositsByUserID(ctx context.Context, ownerID uuid.UUID) ([]Deposit, error) {
	rows, err := q.db.QueryContext(ctx, getDepositsByUserID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.WalletID,
			&i.Amount,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDepositsByUserIDWithLimit = `-- name: GetDepositsByUserIDWithLimit :many
SELECT id, wallet_id, amount, executed_at FROM deposits
WHERE wallet_id IN (
    SELECT id
    FROM wallets
    WHERE owner_id = $1
)
LIMIT $2
`

type GetDepositsByUserIDWithLimitParams struct {
	OwnerID uuid.UUID
	Limit   int64
}

func (q *Queries) GetDepositsByUserIDWithLimit(ctx context.Context, arg GetDepositsByUserIDWithLimitParams) ([]Deposit, error) {
	rows, err := q.db.QueryContext(ctx, getDepositsByUserIDWithLimit, arg.OwnerID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.WalletID,
			&i.Amount,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
